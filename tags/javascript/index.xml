<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on spec-R</title>
    <link>http://rugger-sr.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on spec-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 23 Oct 2015 20:08:24 +0900</lastBuildDate>
    <atom:link href="http://rugger-sr.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Chrome拡張で状態を保持したままページ遷移する</title>
      <link>http://rugger-sr.github.io/blog/2015/10/23/chrome_extension_toggle_button/</link>
      <pubDate>Fri, 23 Oct 2015 20:08:24 +0900</pubDate>
      
      <guid>http://rugger-sr.github.io/blog/2015/10/23/chrome_extension_toggle_button/</guid>
      <description>

&lt;h2 id=&#34;chrome拡張でトグルボタン:38b31bf80c1d56d077e222c704c5e009&#34;&gt;Chrome拡張でトグルボタン&lt;/h2&gt;

&lt;p&gt;ここ暫くChrome拡張を弄っているのだが、
ツールバーのボタンを押すことで状態を切り替えられるような機能を実験してみたのでメモしておく。&lt;/p&gt;

&lt;h2 id=&#34;browser-action:38b31bf80c1d56d077e222c704c5e009&#34;&gt;browser_action&lt;/h2&gt;

&lt;p&gt;今回作成するのはツールバーのボタンである。&lt;/p&gt;

&lt;p&gt;適当なディレクトリを作成して以下の3つのファイルを作成する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;manifest.json&lt;/li&gt;
&lt;li&gt;background.js&lt;/li&gt;
&lt;li&gt;content.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内部でjQueryを利用する場合はこちらも含めておく。
現行の最新は2.1.4だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jquery-2.1.4.min.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それぞれのファイルを以下のようにする&lt;/p&gt;

&lt;h3 id=&#34;manifest-json:38b31bf80c1d56d077e222c704c5e009&#34;&gt;manifest.json&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;manifest_version&amp;quot;: 2,
    &amp;quot;name&amp;quot;: &amp;quot;Chrome Extension Sapmle&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Chrome拡張のサンプルです。&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
    &amp;quot;permissions&amp;quot;: [
        &amp;quot;activeTab&amp;quot;,
        &amp;quot;tabs&amp;quot;
    ],
    &amp;quot;background&amp;quot;: {
        &amp;quot;scripts&amp;quot;: [&amp;quot;background.js&amp;quot;],
        &amp;quot;persistent&amp;quot;: true
    },
    &amp;quot;content_scripts&amp;quot;: [
    {
        &amp;quot;matches&amp;quot;: [ &amp;quot;&amp;lt;all_urls&amp;gt;&amp;quot; ],
        &amp;quot;js&amp;quot;: [&amp;quot;jquery-2.1.4.min.js&amp;quot;, &amp;quot;content.js&amp;quot;]
    }
    ],
    &amp;quot;browser_action&amp;quot;: {
        &amp;quot;default_title&amp;quot;: &amp;quot;Chrome Extension Sapmle&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;background-js:38b31bf80c1d56d077e222c704c5e009&#34;&gt;background.js&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// 状態保持
var isTranslate = false;

// ボタンが押されたら、状態を入れ替えてリロードする
chrome.browserAction.onClicked.addListener(function(tab) {
    isTranslate = !isTranslate;

    // 状態をバッチとして表示する
    if (isTranslate)
        chrome.browserAction.setBadgeText({text : &amp;quot;ON&amp;quot; });
    else
        chrome.browserAction.setBadgeText({text: &amp;quot;&amp;quot;});

    chrome.tabs.reload(tab.id);
});

// contents_scriptからのメッセージ処理
chrome.runtime.onMessage.addListener(
    function(request, sender, sendResponse) {
        if (isTranslate) {
            switch (request.cmd) {
                case &amp;quot;isTranslate&amp;quot;: // 状態の取得
                    sendResponse(isTranslate);
                    return;
                default:
                    break;
            }
        }
        sendResponse(&amp;quot;&amp;quot;);
    }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;content-js:38b31bf80c1d56d077e222c704c5e009&#34;&gt;content.js&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function(){
    // ページロードの度にbackgroundに状態を確認
    chrome.runtime.sendMessage(
        { cmd: &amp;quot;isTranslate&amp;quot; },
        function(isTranslate) {
            if (isTranslate) {
                // 有効だったら変換処理（&amp;quot;spec-R&amp;quot; を &amp;quot;SPEC-R&amp;quot; に置換ｗ）
                var r = document.documentElement.innerHTML.replace(/spec-R/g, &amp;quot;SPEC-R&amp;quot;);
                document.documentElement.innerHTML = r;
            }
        }
    );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;作成した拡張をchromeに追加する:38b31bf80c1d56d077e222c704c5e009&#34;&gt;作成した拡張をChromeに追加する&lt;/h2&gt;

&lt;p&gt;（あくまでも開発モードです）&lt;/p&gt;

&lt;p&gt;Chromeの設定から「拡張機能」画面に移動する。&lt;/p&gt;

&lt;p&gt;右上の「ディベロッパーモード」のチェックをONにして、
「パッケージ化されていない拡張機能を読み込む&amp;hellip;」ボタンを押し、
さっき作成したディレクトリを指定することで以下のようになるはず。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rugger-sr.github.io/images/2015-10-23_01.png&#34; alt=&#34;Chrome拡張機能設定画面&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;これで拡張が使えるようになった。&lt;/p&gt;

&lt;h2 id=&#34;確認:38b31bf80c1d56d077e222c704c5e009&#34;&gt;確認&lt;/h2&gt;

&lt;p&gt;まず無効状態。
ちなみに三本線ボタンの左側にあるジグソーのピースみたいな奴が今回作った拡張のボタン。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rugger-sr.github.io/images/2015-10-23_02.png&#34; alt=&#34;無効状態&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;有効にしてみる。バッジがかわいい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rugger-sr.github.io/images/2015-10-23_03.png&#34; alt=&#34;有効状態&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ページ遷移しても有効になってる？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rugger-sr.github.io/images/2015-10-23_04.png&#34; alt=&#34;ページ遷移後&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;また無効にする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rugger-sr.github.io/images/2015-10-23_05.png&#34; alt=&#34;無効に戻す&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;意外と楽ちん。&lt;/p&gt;

&lt;h2 id=&#34;今後は:38b31bf80c1d56d077e222c704c5e009&#34;&gt;今後は？&lt;/h2&gt;

&lt;p&gt;これでツールバーボタンのステートは複数のウィンドウでも維持されるが、
内容はカレントウィンドウ（のタブ）しか変わらない。&lt;/p&gt;

&lt;p&gt;まぁ、今回は実験なので詰めは甘いが、
background.jsから状態遷移時に他のタブに通知するとか、
特定のタブ毎に状態を持つとか、
色々対応の方法はあると思う。&lt;/p&gt;

&lt;p&gt;次回は、拡張から外部APIを呼んで見る予定。&lt;/p&gt;

&lt;h2 id=&#34;雑感:38b31bf80c1d56d077e222c704c5e009&#34;&gt;雑感&lt;/h2&gt;

&lt;p&gt;今後Edgeの拡張もChrome互換になるという話もあるし、
この手のノウハウは溜めておいて損は無いと思う。&lt;/p&gt;

&lt;p&gt;というか、思ったより簡単に対応できるので楽しくなってきたｗ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WEB フロントエンドフレームワーク</title>
      <link>http://rugger-sr.github.io/blog/2015/09/26/web_frontend/</link>
      <pubDate>Sat, 26 Sep 2015 00:06:52 +0900</pubDate>
      
      <guid>http://rugger-sr.github.io/blog/2015/09/26/web_frontend/</guid>
      <description>

&lt;h2 id=&#34;今時のwebフロントエンド実装:4d18cf528cb7d140af4f0ffb0cec8cec&#34;&gt;今時のWEBフロントエンド実装&lt;/h2&gt;

&lt;p&gt;これまでWEBフロントエンドといえば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;javascriptといえばjQuery&lt;/li&gt;
&lt;li&gt;cssといえば bootstrap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という古臭い私ｗ&lt;/p&gt;

&lt;p&gt;ASP.NET MVC で利用されていた knockout.js もちょっと触ったくらいで
特に入れ込んで利用してきたわけではなかった。&lt;/p&gt;

&lt;p&gt;ここんとこGoを触っていて、
バックエンドは Martini やら AppEngine でイケそうな感触なので、
どうせならフロントエンドもモダンなものを覚えようかと調べ始めた。&lt;/p&gt;

&lt;p&gt;それにしても、色々と乱立していて困るｗ&lt;/p&gt;

&lt;h2 id=&#34;javascript上位言語:4d18cf528cb7d140af4f0ffb0cec8cec&#34;&gt;javascript上位言語&lt;/h2&gt;

&lt;p&gt;いわゆる、javascriptの言語仕様に限界を感じたベンダが、
「コンパイルすればjavascriptとなる言語」
を模索しているようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CofeeScript&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;記述するには Dart が好みだけどVMをブラウザに搭載するのを諦めたぽいので、
この中で筋が良さそうなのは ES6 をベースとしている TypeScript だろうか。&lt;/p&gt;

&lt;p&gt;要コンパイルと言っても、
タスク自動化ツール等もある昨今だと、
特にデメリットにはならないかもしれない。&lt;/p&gt;

&lt;p&gt;まぁ、必要があれば覚えてみようかな？
レベルで頭に留めておく。&lt;/p&gt;

&lt;h2 id=&#34;ほにゃらら-js:4d18cf528cb7d140af4f0ffb0cec8cec&#34;&gt;ほにゃらら.js&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backbone.js&lt;/li&gt;
&lt;li&gt;knockout.js&lt;/li&gt;
&lt;li&gt;Angular.js&lt;/li&gt;
&lt;li&gt;React.js&lt;/li&gt;
&lt;li&gt;Reactive.js&lt;/li&gt;
&lt;li&gt;Vue.js&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多いよ（怒）&lt;/p&gt;

&lt;p&gt;最近はパッケージマネージャとして npm を使うケースが増えている。
本来はサーバサイドで動く node.js に関連するモジュールの管理に使っていたものが、
いつの間にかjavascriptパッケージマネージャのデファクトのように扱われているみたいだ。&lt;/p&gt;

&lt;p&gt;一応、node.js はインストールしているので困ることは無いが、
残念ながら殆ど使っていないｗし、
あまり依存関係が複雑なのを好まない私としては、
Vue.js あたりをCDNで直接指定するのがシンプルで良いかもしれない。&lt;/p&gt;

&lt;p&gt;もう一つ、モダン且つシンプルで今後流行りそうなのが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://aurelia.io/&#34;&gt;Aurelia.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;である。&lt;/p&gt;

&lt;p&gt;Angular.js からES6/7を見据えて再設計した感じで、
テンプレートの記述も素のhtmlに近いから、
デザイナーと連携して事を進めている場合は特に重宝しそう。&lt;/p&gt;

&lt;p&gt;今一番ホットなフレームワークかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;んで-お前はどうするんだよ:4d18cf528cb7d140af4f0ffb0cec8cec&#34;&gt;んで、お前はどうするんだよ！&lt;/h2&gt;

&lt;p&gt;個人的に使うにはUIが楽に構築できれば良いので、
Vue.js や React.js あたりにしようかと思っている。&lt;/p&gt;

&lt;p&gt;ちょっと残念なのが、テンプレートに埋め込むときに &amp;ldquo;{{&amp;hellip;}}&amp;rdquo; とするので、
Go の template とバッティングするところかな…。
Go 側でカスタマイズできるみたいなので、そっちで逃げるのも手か。&lt;/p&gt;

&lt;p&gt;そして今後仕事である程度の規模が必要になることも有ると思うので、
Angular.js や Aurelia.js あたりにも慣れておけば、
いざって時に慌てないで済みそうだ。&lt;/p&gt;

&lt;p&gt;そういえば、Google Closure Library はどこ行ったんだろ？
あまり使われていないのかな？
個人的に期待していたのだけど、導入が面倒なのでまだ手を出していない。
最近リリースなどもあまり出していないみたいで、
ニュースに載ることもめっきり減っているような気がするなぁ。&lt;/p&gt;

&lt;p&gt;こいつも後で調べてみるか…。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>