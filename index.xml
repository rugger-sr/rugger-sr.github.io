<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spec-R</title>
    <link>http://rugger-sr.github.io/</link>
    <description>Recent content on spec-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 18 Sep 2015 18:24:42 +0900</lastBuildDate>
    <atom:link href="http://rugger-sr.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Windowsのコマンドプロンプトをカスタマイズする</title>
      <link>http://rugger-sr.github.io/blog/2015/09/18/commandprompt/</link>
      <pubDate>Fri, 18 Sep 2015 18:24:42 +0900</pubDate>
      
      <guid>http://rugger-sr.github.io/blog/2015/09/18/commandprompt/</guid>
      <description>

&lt;h2 id=&#34;そもそもコマンドプロンプトって:b645646fe2056628a0b19adc6924025a&#34;&gt;そもそもコマンドプロンプトって？&lt;/h2&gt;

&lt;p&gt;[WindowsKey]+[R] 押して &amp;ldquo;cmd&amp;rdquo; と入力して [Enter] すると起動するアレ。&lt;/p&gt;

&lt;p&gt;（スタートボタンから「コマンドプロンプト」を探してクリックしても起動しますが…）&lt;/p&gt;

&lt;p&gt;起動直後はこんな感じで表示されるハズ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft Windows [Version 10.0.10240]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\rugger&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;見辛いんだよね:b645646fe2056628a0b19adc6924025a&#34;&gt;見辛いんだよね～&lt;/h2&gt;

&lt;p&gt;入力を促すプロンプトですが、デフォルトだと&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[カレントディレクトリ]&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となっているので、
使っているとフォルダ階層が深くなった時に非常に見辛くなる。&lt;/p&gt;

&lt;p&gt;例えば VisualStudio付属のMFCソースディレクトリに行くと（&lt;strong&gt;行くのか？&lt;/strong&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\atlmfc\src\mfc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかなってしまい、そこでソースファイルを表示しようとすると（&lt;strong&gt;するのか？&lt;/strong&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\atlmfc\src\mfc&amp;gt;type afxas
ert.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった形で入力中に改行されてしまい、かなり&lt;strong&gt;モニョる&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;はいそこ、「どーせコマンドなんてコピペするから気にならん…」とか言わない。&lt;/p&gt;

&lt;h2 id=&#34;表示をカスタマイズする:b645646fe2056628a0b19adc6924025a&#34;&gt;表示をカスタマイズする&lt;/h2&gt;

&lt;p&gt;実はこのプロンプト表示はカスタマイズできる。&lt;/p&gt;

&lt;p&gt;おそらく、皆知っているが面倒だから設定などしないと思う。&lt;/p&gt;

&lt;p&gt;だが私は、MS-DOSの頃からこのプロンプトをカスタマイズして使っている。&lt;/p&gt;

&lt;p&gt;ちなみにこんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt; C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\atlmfc\src\mfc
$ type afxasert.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うん見易い。（&lt;strong&gt;よね？&lt;/strong&gt;）&lt;/p&gt;

&lt;p&gt;カレントディレクトリの後ろに改行を入れて、
コマンド入力が左端に揃うようになっているだけなのだが、
個人的に凄く気に入っている。
ちなみに昔はエスケープシーケンスで色付けとかしていたが、
今は面倒なのでやっていないｗ&lt;/p&gt;

&lt;p&gt;で、どうやるのか。&lt;/p&gt;

&lt;p&gt;コマンドプロンプトからそのまま prompt というコマンドで設定する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/free/NT/WinKeyWord/20040805/1/prompt.shtml&#34;&gt;Windowsコマンド集：（prompt）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、私と同じ表示を行う為には以下のようにすれば良い。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;prompt $Q$g$S$p$_$$$S&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;でもこれだけだと、毎回コマンドプロンプトを開く度に実行しなければならない。
MS-DOSの頃は AUTOEXEC.BAT とかに書いておけば良かったものの、
32bit以降のWindowsでは存在しない。&lt;/p&gt;

&lt;p&gt;そこで、レジストリの設定を行う。&lt;/p&gt;

&lt;h2 id=&#34;レジストリの設定:b645646fe2056628a0b19adc6924025a&#34;&gt;レジストリの設定&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ここからの変更は自己責任でお願いします。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;コマンドプロンプトの各種設定は、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というキーに保存されている。&lt;/p&gt;

&lt;p&gt;[WidowsKey]+[R] から &amp;ldquo;regedit&amp;rdquo; [Enter] とするとレジストリエディタが起動するので、
このキーの &amp;ldquo;AutoRun&amp;rdquo; という名前の文字列パラメータを開き（無ければ新規で作る）、
値として &amp;ldquo;prompt [&amp;hellip;]&amp;rdquo; といった文字列を設定する。&lt;/p&gt;

&lt;p&gt;これで、コマンドプロンプトを起動する度にこのコマンドが実行され、表示が適用される。&lt;/p&gt;

&lt;h2 id=&#34;regファイル作っちゃえば:b645646fe2056628a0b19adc6924025a&#34;&gt;regファイル作っちゃえば？&lt;/h2&gt;

&lt;p&gt;仕事でPCを使っていると、結構頻繁にマシンが入れ替わる。&lt;/p&gt;

&lt;p&gt;その度にこんな設定を行うのは面倒くさい。&lt;/p&gt;

&lt;p&gt;ということで、reg ファイルを作成する。&lt;/p&gt;

&lt;p&gt;レジストリの詳細は &lt;a href=&#34;https://technet.microsoft.com/en-us/library/cc951805.aspx&#34;&gt;Command Processor&lt;/a&gt;
を確認してもらうとして、普段私が利用している reg ファイルを紹介する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\SOFTWARE\Microsoft\Command Processor]
&amp;quot;AutoRun&amp;quot;=&amp;quot;prompt $Q$g$S$p$_$$$S&amp;quot;
&amp;quot;CompletionChar&amp;quot;=dword:00000009
&amp;quot;DefaultColor&amp;quot;=dword:00000000
&amp;quot;EnableExtensions&amp;quot;=dword:00000001
&amp;quot;PathCompletionChar&amp;quot;=dword:00000009
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意点としては、
このファイルは文字コードUTF-16で保存しなければならないということ。&lt;/p&gt;

&lt;p&gt;一番簡単なのは「メモ帳」で「名前を付けて保存」から
「文字コード」を &amp;ldquo;Unicode&amp;rdquo; として保存する。これでok。&lt;/p&gt;

&lt;p&gt;逆にレジストリエディタの該当キーを右クリックして「エクスポート」し、
そのファイルをメモ帳で編集する方が確実かも。いずれかお好きな方法で。&lt;/p&gt;

&lt;p&gt;こんなファイルをcmd.regとかいうファイル名で保存しておけば、
このファイルをエクスプローラからダブルクリックするだけで設定が可能になる。&lt;/p&gt;

&lt;p&gt;では、みなさん素敵なCLIライフを♪&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>https 経由の git 認証を自動化する for Windows</title>
      <link>http://rugger-sr.github.io/blog/2015/09/15/git_https_authentication/</link>
      <pubDate>Tue, 15 Sep 2015 18:08:13 +0900</pubDate>
      
      <guid>http://rugger-sr.github.io/blog/2015/09/15/git_https_authentication/</guid>
      <description>

&lt;h2 id=&#34;gitの認証:d094a7cc2a8916455815107f0b3ad339&#34;&gt;gitの認証&lt;/h2&gt;

&lt;p&gt;ssh経由で鍵ペア作っておくのが一番楽なのだが、
httpsで公開されているリポジトリの場合は、
pushやpullの度に毎回ID/pwdを聞かれるのが&lt;strong&gt;鬱陶しい&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;そこでパスワードを記憶しておく方法を調べてみたところ、
Windowsにもgitの認証を自動化するHelperを見つけたのでメモしておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gitcredentialstore.codeplex.com/&#34;&gt;Windows Credential Store for Git&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;インストール手順:d094a7cc2a8916455815107f0b3ad339&#34;&gt;インストール手順&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上記サイトから git-credential-winstore.exe をダウンロード&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ダウンロードしたexeを直接実行&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;git.exeへのPATHが通っていればそのまま実行。
通って無ければ以下のように指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; git-credential-winstore.exe -i C:\Path\To\Git.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、以下の様なメッセージボックスが表示されるので「はい」を押す。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rugger-sr.github.io/images/2015-09-15_01.png&#34; alt=&#34;git-credential-winstoreのメッセージボックス&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;すると、C:\Users[username].gitconfig ファイルに以下の行が追記される。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[credential]
	helper = !&#39;C:\\Users\\[username]\\AppData\\Roaming\\GitCredStore\\git-credential-winstore.exe&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;パスワードを設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;後はremoteにpushするなどして、いわゆるgitの認証が行われるように促すと…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ヘルパが起動して以下の様な ID/pwd の入力画面が表示さるから、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rugger-sr.github.io/images/2015-09-15_02.png&#34; alt=&#34;git-credential-winstoreのID/PWD入力画面&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;対象アカウントを入力し「ok」を押せば設定完了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Pages &#43; Hugo でブログ</title>
      <link>http://rugger-sr.github.io/blog/2015/09/13/hugo/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rugger-sr.github.io/blog/2015/09/13/hugo/</guid>
      <description>

&lt;h2 id=&#34;始めるにあたって:978be23c11981924e1b317aebba4cbef&#34;&gt;始めるにあたって&lt;/h2&gt;

&lt;p&gt;twitterはほぼゲーム垢だし、
facebookは記録として残すようなイメージでも無いので、
個人的な技術メモ的な内容でブログを復活させてみようかと思い、物色。&lt;/p&gt;

&lt;p&gt;各種ホスティングサービスも考えたけど、
&lt;strong&gt;広告とか広告とか広告&lt;/strong&gt;なんかは少々ウザいし、
お金払うのも勿体無い。&lt;/p&gt;

&lt;p&gt;とゆー経緯で探してみると、GitHubのPagesを使って静的ブログを運営する記事がちらほら。&lt;/p&gt;

&lt;p&gt;どうせ記事執筆はPCからだろうし、
マシンスペック的にも複雑なjavascriptを使った管理サイトより、
エディタでmarkdown記述&amp;amp;CLIで運用できる仕組みは、
私（のロースペックPC）にはピッタリなので、これに決めた。&lt;/p&gt;

&lt;p&gt;次は静的サイトジェネレータ選び。
記事生成の速さとgolangのプロジェクトであるという観点から&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に決定。&lt;/p&gt;

&lt;h2 id=&#34;hugoのインストール:978be23c11981924e1b317aebba4cbef&#34;&gt;Hugoのインストール&lt;/h2&gt;

&lt;p&gt;私のマシンはWindowsなので、
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugoのリリース一覧&lt;/a&gt;
より hugo_0.14_windows_amd64.zip をダウンロード。&lt;/p&gt;

&lt;p&gt;アーカイブの中を覗いてみると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo_0.14_windows_amd64.exe
license.md
readme.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の3つのみ。至ってシンプル。&lt;/p&gt;

&lt;p&gt;これを、C:\Hugo あたりに展開し、
exe ファイルを hugo.exe という名前で複製してからPATHを通しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hugo version
Hugo Static Site Generator v0.14 BuildDate: 2015-05-26T01:29:16+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok.&lt;/p&gt;

&lt;h2 id=&#34;作業ディレクトリの作成からサイト生成:978be23c11981924e1b317aebba4cbef&#34;&gt;作業ディレクトリの作成からサイト生成&lt;/h2&gt;

&lt;p&gt;ブログ用の作業ディレクトリを作成して初期サイト生成。
私はDropBox上に作った。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd [work_dir]
&amp;gt; hugo new site spec-R
&amp;gt; cd spec-R
&amp;gt; tree
フォルダー パスの一覧:  ボリューム Windows7_OS
ボリューム シリアル番号は 00000200 8A06:F800 です
C:.
├─archetypes
├─content
├─data
├─layouts
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;new site しても無言だったので、最初何が起こったのか分からなかったｗ&lt;/p&gt;

&lt;h2 id=&#34;テーマの設定とローカルサーバ稼働確認:978be23c11981924e1b317aebba4cbef&#34;&gt;テーマの設定とローカルサーバ稼働確認&lt;/h2&gt;

&lt;p&gt;公式では、以下のコマンドで全部のテーマをインストールし、
あとから不要なものを削除するとか書いてある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私はシンプルでステキな&lt;a href=&#34;https://github.com/tanksuzuki/&#34;&gt;tanksuzuki&lt;/a&gt;さんの
&lt;a href=&#34;https://github.com/tanksuzuki/angels-ladder&#34;&gt;angels-ladder&lt;/a&gt;というテーマを
少々カスタマイズして利用させてもらい、
慣れてきたら後で自作することにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; md themes
&amp;gt; cd themes
&amp;gt; git clone https://github.com/tanksuzuki/angels-ladder angels-ladder
&amp;gt; cd ..
&amp;gt; hugo server -D -w -t angels-ladder -d .\draft
...
Serving pages from ...\spec-R\draft
Web Server is available at http://127.0.0.1:1313/
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-d の指定はジェネレータの出力ディレクトリ。
デフォルトだと.\publicにできるのだけど、
リリース時に下書き（draft）を消してくれないので、
下書きとリリースのディレクトリを分けておく。&lt;/p&gt;

&lt;p&gt;ブラウザで&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;を確認。
無事稼働。&lt;/p&gt;

&lt;h2 id=&#34;テーマの設定-カスタマイズ:978be23c11981924e1b317aebba4cbef&#34;&gt;テーマの設定&amp;amp;カスタマイズ&lt;/h2&gt;

&lt;p&gt;テーマの設定はブログのルートディレクトリに config.toml というファイルを作成して記述する。
内容は&lt;a href=&#34;https://github.com/tanksuzuki/angels-ladder#configuration&#34;&gt;Configuration&lt;/a&gt;からコピペ&amp;amp;修正。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://rugger-sr.github.io/&amp;quot;
languageCode = &amp;quot;ja-JP&amp;quot;
title = &amp;quot;spec-R&amp;quot;
disqusShortname = &amp;quot;らが～&amp;quot;

[Params]
subtitle = &amp;quot;らが～の備忘録。&amp;quot;
facebook = &amp;quot;https://facebook.com/kouji.sekine&amp;quot;
twitter = &amp;quot;https://twitter.com/emi303&amp;quot;
github = &amp;quot;https://github.com/rugger.sr&amp;quot;
profile = &amp;quot;/images/profile.png&amp;quot;
copyright = &amp;quot;Written by らが～&amp;quot;

[Permalinks]
post = &amp;quot;/blog/:year/:month/:day/:slug/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特筆することは無いけれど、
permalinkは /blog/年/月/日/slug/ と変更し、
./static/images/profile.png に自分のアイコンをコピーしておく。&lt;/p&gt;

&lt;p&gt;また、このテーマはコードハイライトにhighlight.jsを利用しているので、
jsの指定をCDNに切り替え、
加えてgistを貼った時との親和性ｗからstyleをgithub-gistに変更しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---- ...\themes\angels-ladder\layouts\partials\header.html ----
- &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/highlight_monokai.css&amp;quot;&amp;gt;
+ &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.8.0/styles/github-gist.min.css&amp;quot;&amp;gt;

---- ...\themes\angels-ladder\layouts\partials\footer.html ----
- &amp;lt;script src=&amp;quot;/js/highlight.pack.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
+ &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.8.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/theme.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;記事作成:978be23c11981924e1b317aebba4cbef&#34;&gt;記事作成&lt;/h2&gt;

&lt;p&gt;まず、記事投稿時の初期markdownテンプレートを定義できるらしいので、
.\archetypes\default.md というファイルを作成し、
以下のようにしておく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;now()&amp;quot;
draft = true
slug = &amp;quot;&amp;quot;
tags = [&amp;quot;&amp;quot;, &amp;quot;&amp;quot;]
title = &amp;quot;&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして記事を生成し、内容を更新する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hugo new post\2015-09-13_Hugo.md
(記事を記述)
&amp;gt; type .\content\post\2015-09-13_Hugo.md
+++
title = &amp;quot;GitHub Pages + Hugo でブログ&amp;quot;
date = &amp;quot;2015-09-13&amp;quot;
draft = true
slug = &amp;quot;Hugo&amp;quot;
tags = [&amp;quot;Hugo&amp;quot;, &amp;quot;Github&amp;quot;]

+++

## 始めるにあたって

(以下内容)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてdraftサーバで確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hugo server -w -D -t angels-ladder -d .\draft
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok.&lt;/p&gt;

&lt;h2 id=&#34;gitリポジトリの作成とgithubへのpush:978be23c11981924e1b317aebba4cbef&#34;&gt;gitリポジトリの作成とGitHubへのpush&lt;/h2&gt;

&lt;p&gt;まずブログ環境と記事md関連管理用のgitリポジトリを作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; git init
&amp;gt; type CON &amp;gt; .gitignore
draft/
public/
.*.swp
.*.un~
^Z
&amp;gt; git add -A
&amp;gt; git commit -m &amp;quot;spec-R initial contents&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こいつは、ローカル管理で良い（DropBox使えば安心？）。&lt;/p&gt;

&lt;p&gt;次に、公開向けファイル生成し、こちらをGitHub Pagesにpushできるようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hugo -t angels-ladder -d .\public
&amp;gt; cd public
&amp;gt; git init
&amp;gt; git add -A
&amp;gt; git commit -m &amp;quot;spec-R GitHub Pages initial contents&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GitHubに rugger-sr.github.io という名称でリポジトリを作成し、
publicリポジトリのremoteに設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; git remote add origin https://github.com/rugger-sr/rugger-sr.github.io.git
&amp;gt; git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで &lt;a href=&#34;http://rugger-sr.github.io/&#34;&gt;http://rugger-sr.github.io/&lt;/a&gt; を確認…あれ？記事が表示されない…。&lt;/p&gt;

&lt;p&gt;そりゃ下書きですもんｗ&lt;/p&gt;

&lt;h2 id=&#34;運用バッチファイルを作成:978be23c11981924e1b317aebba4cbef&#34;&gt;運用バッチファイルを作成&lt;/h2&gt;

&lt;p&gt;以下の様な3つのバッチファイルを作成&lt;/p&gt;

&lt;p&gt;h_draft_server.bat&lt;/p&gt;

&lt;p&gt;下書きを有効（-D）にしたドラフトサーバを起動する。
コンテンツ（*.md）の更新などもすぐに反映される（-w）ので便利。
生成される静的ファイルは、公開用と間違えないように
.\draftディレクトリ以下に生成（-d）している。
起動するWEBサーバのポートは1313固定みたいだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo &#39;#### Hugo Draft Server : spec-R ####&#39;
@start hugo server -D -w -t angels-ladder -d .\draft
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;h_production_server.bat&lt;/p&gt;

&lt;p&gt;下書きを無効にしたローカルサーバを起動する。
基本的にはdraftと同じだが、出力ディレクトリを .\public とする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo &#39;#### Hugo Production Server : spec-R ####&#39;
@start hugo server -w -t angels-ladder -d .\public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;h_publish.bat&lt;/p&gt;

&lt;p&gt;コンテンツをビルドし、更新された内容をGitHubにpushするバッチ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
echo &#39;#### Hugo publish : spec-R ####&#39;
hugo -t angels-ladder -d .\public
cd public
git add -A
git commit -m &amp;quot;site publish&amp;quot;
git push
echo &#39;Site Published.&#39;
echo on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまで作ったら、先のmd冒頭にある draft を false に設定して
h_publish.bat を実行する。&lt;/p&gt;

&lt;p&gt;んで、完成。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rugger-sr.github.io/&#34;&gt;spec-R&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今後とも、よろしくお願いします。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>